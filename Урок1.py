# Урок 1. Знакомство с Python
# 1. Напишите программу, которая принимает на вход цифру, обозначающую день недели, и проверяет, является ли этот день выходным.

# Пример:
# - 6 -> да
# - 7 -> да
# - 1 -> нет

# 2. Напишите программу для проверки истинности утверждения ¬(X ⋁ Y ⋁ Z) = ¬X ⋀ ¬Y ⋀ ¬Z для всех значений предикат.
# 3. Напишите программу, которая принимает на вход координаты точки (X и Y), причём X ≠ 0 и Y ≠ 0 и выдаёт номер четверти плоскости, в которой находится эта точка (или на какой оси она находится).

# Пример:
# - x=34; y=-30 -> 4
# - x=2; y=4-> 1
# - x=-34; y=-30 -> 3

# 4. Напишите программу, которая по заданному номеру четверти, показывает диапазон возможных координат точек в этой четверти (x и y).
# 5. Напишите программу, которая принимает на вход координаты двух точек и находит расстояние между ними в 2D пространстве.

# Пример:
# - A (3,6); B (2,1) -> 5,09
# - A (7,-5); B (1,-1) -> 7,21
#
# Дополнительно решить следующие:
# 6. найти факториал числа
# 7. проверить число на простоту (т.е. что число делится только на 1 и само на себя)
# 8. найти наибольший простой делитель числа


import math
from operator import truediv
from re import I

    # 1. Напишите программу, которая принимает на вход цифру, обозначающую день недели, и проверяет, является ли этот день выходным.


def task1():
    print("Напишите программу, которая принимает на вход цифру, обозначающую день недели, и проверяет, является ли этот день выходным.\n")
    if 5<int(input("Введите номер дня недели:"))<8:
        print("да")
    else:
        print("нет")


    # 2. Напишите программу для проверки истинности утверждения ¬(X ⋁ Y ⋁ Z) = ¬X ⋀ ¬Y ⋀ ¬Z для всех значений предикат.


def task2():
    print("Напишите программу для проверки истинности утверждения ¬(X v Y v Z) = ¬X ⋀ ¬Y ⋀ ¬Z для всех значений предикат.")
    peremHM = 3
    x_task2_bolsh4 = []
    y_task2_d2del2 = []
    z_task2_del2 = []
    logFormula = []

    formula = "¬(X v Y v Z) = ¬X ⋀ ¬Y ⋀ ¬Z"
    print("|{}|{}|{}|{}|".format("X".ljust(7), "Y".ljust(7), "Z".ljust(7), formula))
    print("-"*(26 + len(formula)))

    for j in range(0, 2**peremHM):
        x_task2_bolsh4.append(False if j >= 4 else True)
        y_task2_d2del2.append(False if (j//2) % 2 != 0 else True)
        z_task2_del2.append(False if j % 2 != 0 else True)

        x = z_task2_del2[j]
        y = y_task2_d2del2[j]
        z = z_task2_del2[j]

        logFormula = (not(x or y or z) == (not x or not y or not z)) # = not (y xor z)

        print("|{}|{}|{}|{}|".format(str(x).ljust(7), str(y).ljust(7), str(z).ljust(7), str(logFormula).ljust(len(formula))))


    # 3. Напишите программу, которая принимает на вход координаты точки (X и Y), причём X ≠ 0 и Y ≠ 0 и выдаёт номер четверти плоскости, в которой находится эта точка (или на какой оси она находится).


def task3():
    print("Напишите программу, которая принимает на вход координаты точки (X и Y), причём X ≠ 0 и Y ≠ 0 и выдаёт номер четверти плоскости, в которой находится эта точка (или на какой оси она находится).")
    print("Введите X, затем через Enter - Y")
    x_task3 = float(input())
    y_task3 = float(input())
    if x_task3 == 0 or y_task3 == 0:
        print("X ≠ 0 и Y ≠ 0")
    elif x_task3 > 0:
        if y_task3 > 0:
            print(1)
        else:
            print(4)
    else:
        if y_task3 > 0:
            print(2)
        else:
            print(3)


    # 4. Напишите программу, которая по заданному номеру четверти, показывает диапазон возможных координат точек в этой четверти (x и y).


def task4():
    print("Напишите программу, которая по заданному номеру четверти, показывает диапазон возможных координат точек в этой четверти (x и y).")
    d_task4 = int(input("Введите номер четверти:\n"))
    if d_task4 == 1:
        print("x = ({}, {}), y = ({}, {})".format(0, float("inf"), 0, float("inf")))
    elif d_task4 == 2:
        print("x = ({}, {}), y = ({}, {})".format(float("-inf"), 0, 0, float("inf")))
    elif d_task4 == 3:
        print("x = ({}, {}), y = ({}, {})".format(float("-inf"), 0, float("-inf"), 0))
    elif d_task4 == 4:
        print("x = ({}, {}), y = ({},{})".format(0, float("inf"), float("-inf"), 0))
    else:
        print("Вы ввели что-то не то.")


    # 5. Напишите программу, которая принимает на вход координаты двух точек и находит расстояние между ними в 2D пространстве.


def task5():
    print("Напишите программу, которая принимает на вход координаты двух точек и находит расстояние между ними в 2D пространстве.")
    print("Введите координаты А(x,y)")
    x_A_task5 = float(input("Введите X:\n"))
    y_A_task5 = float(input("Введите Y:\n"))
    print("Введите координаты B(x,y)")
    x_B_task5 = float(input("Введите X:\n"))
    y_B_task5 = float(input("Введите Y:\n"))
    print('{0:0.2f}'.format(int((((x_A_task5 - x_B_task5)**2 + (y_A_task5 - y_B_task5)**2)**(0.5))*100)/100))


# Дополнительно решить следующие:

    # 6. найти факториал числа


def task6():
    print("Найти факториал числа.")
    number_task6 = int(input("Введите число:\n"))
    fact_task6 = 1
    for i in range(2,number_task6+1): fact_task6*=i
    print(fact_task6)


    # 7. Проверить число на простоту (т.е. что число делится только на 1 и само на себя).


def task7():
    print("Проверить число на простоту.")
    number_task7 = int(input("Введите число:\n"))
    deliteli_task7 = int(number_task7 ** (0.5))
    protstoe_task7 = True
    for i in range(2,deliteli_task7):
        if number_task7 % i == 0:
            protstoe_task7 = False
    if protstoe_task7:
        print("Простое.")
    else:
        print("Сложное.")


    # 8. Найти наибольший простой делитель числа.


def task8():
    print("Найти наибольший простой делитель числа.")
    number_task8 = int(input("Введите число:\n"))
    cut_number_task8 = number_task8
    deliteli_task8 = int(number_task8 ** (0.5))
    max_del_task8 = 1
    curr_del_task8 = 2
    
    # Перебирать делители, квадрат которых превышает текущее Число бессмысленно:
    # если подобные делители возможны для Числа, частное с Числом будет меньше Числа
    # (поскольку перебор идёт по возрастанию делителей - это невозможно)
    while cut_number_task8 >= curr_del_task8**2:
        # Если число делится на текущий делитель, делим, текущий делитель запоминаем (по возрастанию)
        if cut_number_task8 % curr_del_task8 == 0:
            cut_number_task8 /= curr_del_task8
            max_del_task8 = curr_del_task8
        # Иначе: идём к следующему делителю +1
        else:
            curr_del_task8+=1

    # если покинули цикл, то вычленить делители невозможно, значит, это простое число, проверяем, больше ли оно максимального.
    if cut_number_task8 > max_del_task8:
        max_del_task8 = int(cut_number_task8)

    print(max_del_task8)

print("Выберите задание, введя соответствующее число:\n" +
"1 - Напишите программу, которая принимает на вход цифру, обозначающую день недели, и проверяет, является ли этот день выходным.\n" +
"2 - Напишите программу для проверки истинности утверждения ¬(X v Y v Z) = ¬X ⋀ ¬Y ⋀ ¬Z для всех значений предикат.\n" +
"3 - Напишите программу, которая принимает на вход координаты точки (X и Y), причём X ≠ 0 и Y ≠ 0 и выдаёт номер четверти плоскости, в которой находится эта точка (или на какой оси она находится).\n" +
"4 - Напишите программу, которая по заданному номеру четверти, показывает диапазон возможных координат точек в этой четверти (x и y).\n" +
"5 - Напишите программу, которая принимает на вход координаты двух точек и находит расстояние между ними в 2D пространстве.\n" +
"6 - Найти факториал числа.\n" +
"7 - Проверить число на простоту (т.е. что число делится только на 1 и само на себя).\n" +
"8 - Найти наибольший простой делитель числа.\n\n")

tasks = int(input())

if tasks == 1:
    task1()
elif tasks == 2:
    task2()
elif tasks == 3:
    task3()
elif tasks == 4:
    task4()
elif tasks == 5:
    task5()
elif tasks == 6:
    task6()
elif tasks == 7:
    task7()
elif tasks == 8:
    task8()